{
	"monitor":
	{

	//
	// Can be used to forcibly set the location of the ReMon root folder.
	// This is useful if we are expecting to run the MVEE on a system where
	// readlink -f /proc/self/exe would not return the true path to the MVEE
	// binary.
	//
	// NOTE:
	// If the MVEE binary is in /home/user/ReMon/MVEE/bin/Release, then the root
	// path you should use would be /home/user/ReMon/
	//
	"root_path" : "",

	//
	// The location of the Cerberus-ready version of glibc. If is_absolute is
	// set to false, Cerberus will prepend the MVEE root and append the arch
	// (i386 or amd64) to this folder name.
	//
	"libc_path" :
	{
		"path" : "/patched_binaries/libc/",
		"is_absolute" : false
	},

	//
	// The location of binary rewriting libs used by ERIM (we can use the system's libraries but it easier to have them all in one place).
	// If is_absolute is set to false, Cerberus will prepend the MVEE root and append the arch
	// (i386 or amd64) to this folder name.
	//
	"erim_binary_rewriting_libs_path" :
	{
		"path" : "/erim_binary_rewriting_libs/",
		"is_absolute" : false
	},

	//
	// The location of the custom openssl libraries
	// If is_absolute is set to false, Cerberus will prepend the MVEE root and append the arch
	// (i386 or amd64) to this folder name.
	//
	"custom_openssl_path" :
	{
		"path" : "/patched_binaries/openssl/",
		"is_absolute" : false
	},

	//
	// Paths to supported benchmark suites. These are only used if you launch
	// Cerberus using the legacy command line options (i.e. ./MVEE <demo number>
	// <number of variants>).
	// If these are not marked as absolute paths, Cerberus will prepend the
	// MVEE root path to the folder name.
	//
	"spec_path" :
	{
		"path" : "/ext/spec2006/",
		"is_absolute" : false
	},

	"parsec2_path" :
	{
		"path" : "/ext/parsec-2.1/",
		"is_absolute" : false
	},

	"parsec3_path" :
	{
		"path" : "/ext/parsec-3.0/",
		"is_absolute" : false
	},

	//
	// If set to true, the MVEE logs everything to stdout as well as the regular
	// log file. This setting has no effect if the MVEE is built with the
	// MVEE_BENCHMARK option enabled.
	//
	"log_to_stdout" : false
	},
	"variant":
	{
	"global":
	{
		"settings":
		{
		//
		// With use_system_libc set to false, Cerberus will force all variants to
		// load their libc and libpthread libraries from the specified path.
		// If the specified path is not marked as absolute, Cerberus will prepend
		// the MVEE root path and append the architecture to the folder name.
		//
		"use_system_libc" : false,

		//
		// With use_erim_binary_rewriting_libs set to true, Cerberus will force all variants to
		// load binary rewriting libs used by ERIM.
		// If the specified path is not marked as absolute, Cerberus will prepend
		// the MVEE root path and append the architecture to the folder name.
		//
		"use_erim_binary_rewriting_libs" : false,

		//
		// With use_custom_openssl set to true, Cerberus will force all variants to
		// load custom openssl libraries
		// If the specified path is not marked as absolute, Cerberus will prepend
		// the MVEE root path and append the architecture to the folder name.
		//
		"use_custom_openssl" : false,

		//
		// If set to true, we launch the variants through the linux perf tool.
		// This also allows disables divergence reporting on write calls
		// originating from the perf tool. The MVEE will buffer output from
		// perf and report perf data individually for each variant when it shuts
		// down.
		//
		"performance_counting_enabled" : false,

		//
		// If set to true, all arguments passed through the MVEE command line
		// will be merged into one arg.
		//
		// In other words, if you type:
		// ./MVEE -N 1 -- echo Hello!
		//
		// The resulting variant invocation will be either:
		// execve("/bin/bash", ["bash", "-c", "echo Hello!", NULL]) (if merge_extra_args is true)
		// OR
		// execve("/bin/bash", ["bash", "-c", "echo", "Hello!", NULL]) (if merge_extra_args is false)
		//
		// The output of the first variant would be:
		// "Hello!"
		// The output of the second variant would be:
		// ""
		//
		"merge_extra_args": true
		},
		"exec":
		{
		//
		// Array of command line arguments passed to the program
		// NOTE: Do not add the basename of the program (i.e., argv[0]) here.
		// ReMon will do this for you
		//
		"argv": [
			"-c"
		],

		//
		// Path to the program binary. Subject to aliasing
		//
		"path": "/bin/bash"
		}
	},
	"sets":
	{
		"default": [
			"variant-A",
			"variant-B"
		]
	},
	"specs":
	{
		"variant-A": {},
		"variant-B": {}
	}
	}
}

